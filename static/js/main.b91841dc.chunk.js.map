{"version":3,"sources":["components/Card.js","components/ErrorBoundry.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","createRoot","document","getElementById","render","es","src_containers_App"],"mappings":"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","file":"static/js/main.b91841dc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\n            <div>\n                <h4>{name}</h4>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport Card from './Card';\n// eslint-disable-next-line\nimport ErrorBoundry from './ErrorBoundry';\n\nconst CardList = ({ robots }) => {\n    /* this piece of code intended for invoking the ErrorBoundry Component(that is useful for production environment) */\n    // if (true) {\n    //     throw new Error('NOOOOOO!')\n    // }\n\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={user.id}\n                            name={user.name}\n                            email={user.email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n    // console.log(state);\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    // console.log(dispatch);\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        // onRequestRobots: () => requestRobots(dispatch), // it's the same as () => dispatch(requestRobots());\n        onRequestRobots: () => dispatch(requestRobots()),\n    };\n}\n\nclass App extends Component {\n// not needed anymore, because all the 'state' is in reducers.js file now\n/*     constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n */\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n// not needed anymore\n/*     componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n */\n\n// not needed anymore\n/*     onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n */\n\n    render() {\n        // const { robots, searchfield } = this.state; // not needed anymore\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        // return !robots.length ? // not needed anymore\n        return isPending ?\n            <h1 className=\"tc\">Loading</h1> :\n            (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// console.log(connect)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nexport const setSearchField = (text) => {\n  // console.log(text);\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n  }\n};\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  // console.log(action.type);\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false});\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}